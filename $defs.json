{
  "$id": "https://schema.aws/defs",
  "title": "AWS Lambda Events",
  "description": "https://docs.aws.amazon.com/lambda/latest/dg/lambda-services.html / https://github.com/michaelbrewer/aws-lambda-events/tree/main/docs/events",
  "$defs": {
    "accountId": {
      "type": "string",
      "pattern": "^[0-9]{12}$",
      "minLength": 12,
      "maxLength": 12
    },
    "service": {
      "title": "AWS Service Code",
      "description": "TODO write bot to fetch all",
      "$comment": "https://docs.aws.amazon.com/general/latest/gr/aws-service-information.html",
      "type": "string",
      "enum": [
        "amplify",
        "apigateway",
        "appconfig",
        "appfabric",
        "appmesh",
        "apprunner",
        "appflow",
        "application-autoscaling",
        "discovery",
        "mgn",
        "appstream2",
        "appsync",
        "apptest",
        "athena",
        "auditmanager",
        "a2i-runtime.sagemaker",
        "rds",
        "autoscaling-plans",
        "b2bi",
        "backup",
        "batch",
        "bedrock",
        "ce",
        "cur",
        "budgets",
        "api.pricing",
        "savingsplans",
        "billingconductor",
        "braket",
        "bugbust",
        "acm",
        "chatbot",
        "identity-chime",
        "media-pipelines-chime",
        "messaging-chime",
        "voice-chime",
        "meetings-chime",
        "service.chime",
        "cleanrooms"
      ]
    },
    "region": {
      "title": "AWS Region Code",
      "description": "",
      "$comment": "https://docs.aws.amazon.com/general/latest/gr/rande.html#aws_region_endpoints",
      "type": "string",
      "enum": [
        "us-east-2",
        "us-east-1",
        "us-west-1",
        "us-west-2",
        "af-south-1",
        "ap-east-1",
        "ap-south-2",
        "ap-southeast-3",
        "ap-southeast-5",
        "ap-southeast-4",
        "ap-south-1",
        "ap-northeast-3",
        "ap-northeast-2",
        "ap-southeast-1",
        "ap-southeast-2",
        "ap-northeast-1",
        "ca-central-1",
        "ca-west-1",
        "eu-central-1",
        "eu-west-1",
        "eu-west-2",
        "eu-south-1",
        "eu-west-3",
        "eu-south-2",
        "eu-north-1",
        "eu-central-2",
        "il-central-1",
        "me-south-1",
        "me-central-1",
        "sa-east-1",
        "us-gov-east-1",
        "us-gov-west-1"
      ]
    },
    "arn": {
      "type": "string",
      "$comment": "https://docs.aws.amazon.com/IAM/latest/UserGuide/reference-arns.html",
      "pattern": "^arn:aws:(?<service>[a-z0-9-]+):(?<region>(us|af|ap|ca|eu|il|me|sa)-(gov-)?(central|north|northeast|east|southeast|south|west)-[0-5])?:(?<accountId>[0-9]{12})?:(?<resourceType>[a-zA-Z0-9/\\.+-]+[/:]?)(?<resourceId>[a-zA-Z0-9/-]+)$",
      "minLength": 32,
      "maxLength": 512
    },
    "endpoint": {
      "type": "string",
      "pattern": "^https://(?<service>[a-z-]+)\\.(?<region>(us|af|ap|ca|eu|il|me|sa)-(gov-)?(central|north|northeast|east|southeast|south|west)-[0-5])\\.amazonaws\\.com/([-()A-Za-z0-9_\\.!~*';/:@&=+$,=%]*)?(\\?[-()A-Za-z0-9_\\.!~*';/:@&=+$,=%]*)?$",
      "minLength": 32,
      "maxLength": 10240
    },
    "requestId": {
      "oneOf": [
        {
          "$comment": "https://schema.aws/defs#/$defs/stringAWSBase64",
          "type": "string",
          "pattern": "^[0-9a-zA-Z_-]*=*$",
          "minLength": 16,
          "maxLength": 16
        },
        { "$ref": "#/$defs/stringUUID" }
      ]
    },
    "userPrincipalId": {
      "type": "string",
      "pattern": "^AWS:A[0-9A-Z]*(:[a-zA-Z0-9-]+)?$",
      "maxLength": 64
    },
    "ownerPrincipalId": {
      "type": "string",
      "pattern": "^A[0-9A-Z]*$",
      "maxLength": 14
    },
    "httpProtocol": {
      "type": "string",
      "enum": ["HTTP/1.0", "HTTP/1.1", "HTTP/2.0", "HTTP/3.0"]
    },
    "httpMethod": {
      "title": "HTTP Request Methods",
      "description": "TODO QUERY coming in the future",
      "$comment": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods",
      "type": "string",
      "enum": [
        "HEAD",
        "OPTIONS",
        "GET",
        "POST",
        "PUT",
        "PATCH",
        "DELETE",
        "CONNECT",
        "TRACE"
      ]
    },
    "httpIP": {
      "oneOf": [{ "$ref": "#/$defs/httpIPv4" }, { "$ref": "#/$defs/httpIPv6" }]
    },
    "httpIPv4": {
      "$comment": "https://github.com/ajv-validator/ajv-formats/blob/master/src/formats.ts#L69",
      "type": "string",
      "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])$",
      "minLength": 7,
      "maxLength": 15
    },
    "httpIPv6": {
      "$comment": "https://github.com/ajv-validator/ajv-formats/blob/master/src/formats.ts#L70",
      "type": "string",
      "pattern": "^((([0-9a-f]{1,4}:){7}([0-9a-f]{1,4}|:))|(([0-9a-f]{1,4}:){6}(:[0-9a-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3})|:))|(([0-9a-f]{1,4}:){5}(((:[0-9a-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3})|:))|(([0-9a-f]{1,4}:){4}(((:[0-9a-f]{1,4}){1,3})|((:[0-9a-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3}))|:))|(([0-9a-f]{1,4}:){3}(((:[0-9a-f]{1,4}){1,4})|((:[0-9a-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3}))|:))|(([0-9a-f]{1,4}:){2}(((:[0-9a-f]{1,4}){1,5})|((:[0-9a-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3}))|:))|(([0-9a-f]{1,4}:){1}(((:[0-9a-f]{1,4}){1,6})|((:[0-9a-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3}))|:))|(:(((:[0-9a-f]{1,4}){1,7})|((:[0-9a-f]{1,4}){0,5}:((25[0-5]|2[0-4]d|1[0-9]{2}|[1-9]?d)(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3}))|:)))$",
      "minLength": 15,
      "maxLength": 39
    },
    "httpHostname": {
      "type": "string",
      "pattern": "^[\\p{L}\\p{N}\\._-]{2,256}\\.[a-z]{2,6}$",
      "maxLength": 256
    },
    "httpOrigin": {
      "type": "string",
      "pattern": "^https://([\\p{L}\\p{N}\\._-]{2,256}\\.[a-z]{2,6}|localhost)(:[0-9]+)?$",
      "maxLength": 256
    },
    "httpPath": {
      "type": "string",
      "pattern": "^/[a-zA-Z0-9%/\\._-]*$",
      "maxLength": 256
    },
    "httpQueryString": {
      "description": "https://www.ietf.org/rfc/rfc2396.txt Allow reserved, unreserved chars, and %",
      "type": "string",
      "pattern": "^[-()A-Za-z0-9_\\.!~*';/:@&=+$,=%]*$",
      "maxLength": 8192
    },
    "httpCookie": {
      "$comment": "OWASP ASVS 5.0: 5.1.6, https://httpwg.org/http-extensions/draft-ietf-httpbis-rfc6265bis.html#name-set-cookie / https://www.rfc-editor.org/rfc/rfc9110.html#name-tokens",
      "type": "string",
      "pattern": "^(?:[\\u0021\\u0023-\\u0025\\u0027\\u002A\\u002B\\u002D\\u002E\\u0030-\\u0039\\u0041-\\u005A\\u005E-\\u007A\\u007C]+=[\\u0021\\u0023-\\u003A\\u003C-\\u005B\\u005D-\\u007E]*;? ?)*$",
      "maxLength": 4096
    },
    "httpHeader": {
      "$comment": "OWASP ASVS 5.0: 5.1.8",
      "type": "string",
      "pattern": "^[\\p{L}\\p{N}\\p{P} ]*$",
      "maxLength": 4096
    },
    "httpHeaders": {
      "type": "object",
      "unevaluatedProperties": false,
      "properties": {
        "accept": {
          "description": "application/json, text/plain, */*",
          "type": "string",
          "pattern": "^(?:([*]|[a-z]+)/([*]|[a-z+\\._-]+)(;v=[a-z0-9]+)?(;q=(1|0|0\\.[0-9]{1,3}))?,? ?)*$",
          "maxLength": 256
        },
        "accept-encoding": {
          "type": "string",
          "pattern": "^(?:(gzip|compress|deflate|br|zstd|identity|\\*)(;q=(1|0|0\\.[0-9]{1,3}))?,? ?)*$",
          "maxLength": 256
        },
        "accept-language": {
          "type": "string",
          "pattern": "^(?:([*]|[a-z]{1,8}(-[a-zA-Z]{1,8})?)(;q=(1|0|0\\.[0-9]{1,3}))?,? ?)*$",
          "maxLength": 256
        },
        "authorization": {
          "type": "string",
          "pattern": "^(Bearer|[a-zA-Z0-9-]+) [a-zA-Z0-9+/=]*$",
          "maxLength": 256
        },
        "cache-control": {
          "type": "string",
          "pattern": "^[a-z0-9=, -]*$",
          "maxLength": 256
        },
        "cloudfront-is-mobile-viewer": {
          "$ref": "#/$defs/stringBoolean"
        },
        "cloudfront-is-smarttv-viewer": {
          "$ref": "#/$defs/stringBoolean"
        },
        "cloudfront-is-tablet-viewer": {
          "$ref": "#/$defs/stringBoolean"
        },
        "cloudfront-viewer-city": { "$ref": "#/$defs/httpHeader" },
        "cloudfront-viewer-country-name": {
          "$ref": "#/$defs/httpHeader"
        },
        "cloudfront-viewer-country-region-name": {
          "$ref": "#/$defs/httpHeader"
        },
        "cookie": {
          "$ref": "#/$defs/httpCookie"
        },
        "content-length": { "$ref": "#/$defs/stringInteger" },
        "content-type": {
          "type": "string",
          "pattern": "^([*]|[a-z]+)/([*]|[a-z+\\._-]+)(; ?charset=[a-zA-Z0-9-]*)?$",
          "maxLength": 32
        },
        "host": { "$ref": "#/$defs/httpHostname" },
        "if-none-match": {
          "type": "string",
          "pattern": "^([*]|(?:\"[a-zA-Z0-9]*\",? ?)*)$",
          "maxLength": 32
        },
        "origin": { "$ref": "#/$defs/httpOrigin" },
        "pragma": { "$ref": "#/$defs/httpHeader" },
        "sec-ch-ua": {
          "type": "string",
          "pattern": "^(?:\"([a-zA-Z ]+|Not[^a-zA-Z0-9]A[^a-zA-Z0-9]Brand)\";v=\"[0-9]+\",? ?)*$",
          "maxLength": 256
        },
        "sec-ch-ua-platform": { "$ref": "#/$defs/httpHeader" },
        "user-agent": { "$ref": "#/$defs/httpHeader" },
        "via": {
          "description": "3.0 [a-z0-9]{30}.cloudfront.net (CloudFront)",
          "$ref": "#/$defs/httpHeader"
        },
        "x-amz-cf-id": {
          "$ref": "#/$defs/stringAWSBase64",
          "type": "string",
          "pattern": "^[0-9a-zA-Z_-]+=*$",
          "minLength": 56,
          "maxLength": 56
        },
        "x-amz-content-sha256": {
          "type": "string",
          "pattern": "^[0-9a-f]*$",
          "minLength": 64,
          "maxLength": 64
        },
        "x-amz-date": {
          "type": "string",
          "pattern": "^[0-9]{8}T[0-9]{6}Z$",
          "minLength": 16,
          "maxLength": 16
        },
        "x-amz-security-token": {
          "$comment": "#/$defs/stringAWSBase64",
          "type": "string",
          "pattern": "^[0-9a-zA-Z+/]+=*$",
          "minLength": 1,
          "maxLength": 1024
        },
        "x-amz-source-account": {
          "$ref": "#/$defs/accountId"
        },
        "x-amz-source-arn": {
          "$ref": "#/$defs/arn"
        },
        "x-amzn-tls-cipher-suite": {
          "type": "string",
          "enum": ["ECDHE-RSA-AES128-GCM-SHA256"]
        },
        "x-amzn-tls-version": {
          "type": "string",
          "enum": ["TLSv1.2", "TLSv1.3"]
        },
        "x-amzn-trace-id": {
          "description": "Root=1-670686af-5a7b8b310c651aef57f5cba3",
          "type": "string",
          "pattern": "^(Self=[0-9a-f-]+;)?Root=[0-9]{1}-[0-9a-f]{8}-[0-9a-f]{24}(;Parent=[0-9a-f]+)?(;Sampled=[0-9]+)?(;Lineage=[0-9a-f:|]+)?$",
          "maxLength": 256
        },
        "x-forwarded-for": {
          "description": "0000:aaaa:ffff:0100:5555:dddd:6666:eeee, 255.255.255.255",
          "type": "string",
          "pattern": "^(?:((?:(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(, )?|(?:[0-9a-f]{0,4}:?){7}[0-9a-f]{0,4}(, )?))+$",
          "maxLength": 256
        },
        "x-forwarded-port": { "const": "443" },
        "x-forwarded-proto": { "const": "https" }
      },
      "required": []
    },
    "httpStatusCode": {
      "$comment": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status",
      "type": "integer",
      "enum": [
        100, 101, 102, 103, 200, 201, 202, 203, 204, 205, 206, 207, 208, 226,
        300, 301, 302, 303, 304, 305, 306, 307, 308, 400, 401, 402, 403, 404,
        405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418,
        421, 422, 423, 424, 425, 526, 428, 429, 431, 451, 500, 502, 503, 504,
        505, 506, 507, 508, 511
      ]
    },
    "authorizerIamAccessKey": {
      "description": "Used in Function URL authorizer.iam.accessKey",
      "type": "string",
      "pattern": "^[0-9A-Z]*$",
      "minLength": 20,
      "maxLength": 20
    },
    "authorizerIamUserId": {
      "description": "Used in Function URL authorizer.iam.userId",
      "type": "string",
      "pattern": "^[0-9A-Z]*:(OriginAccessSession|EdgeCredentialsProxy\\+EdgeHostAuthenticationClient-[0-9A-Z]*-[0-9A-Z]*)$",
      "maxLength": 80
    },
    "s3Checksum": {
      "description": "AWS S3 multipart upload chacksum {44char}-{up to 10_000}",
      "type": "string",
      "pattern": "^[0-9a-zA-Z+/]*=*(-[1-9]|-[1-9][0-9]{0,3}|-10000)?$",
      "maxLength": 49
    },
    "s3UploadId": {
      "type": "string",
      "pattern": "^[0-9a-zA-Z\\._-]*$",
      "maxLength": 172
    },
    "s3PartNumber": {
      "type": "integer",
      "minimum": 1,
      "maximum": 10000
    },
    "arrayOfString": {
      "type": "array",
      "unevaluatedItems": false,
      "items": { "$ref": "#/$defs/string" },
      "uniqueItems": false,
      "minItems": 0,
      "maxItems": 10
    },
    "integer": {
      "type": "integer",
      "minimum": -9007199254740991,
      "maximum": 9007199254740991
    },
    "number": {
      "type": "number",
      "minimum": -9007199254740991,
      "maximum": 9007199254740991
    },
    "integerPositive": {
      "type": "integer",
      "minimum": 0,
      "maximum": 9007199254740991
    },
    "timeEpochInSeconds": {
      "type": "integer",
      "minimum": 1700000000,
      "maximum": 2900000000
    },
    "timeEpochInDecimalSeconds": {
      "type": "number",
      "minimum": 1700000000,
      "maximum": 2900000000
    },
    "timeEpochInMiliseconds": {
      "type": "integer",
      "minimum": 1700000000000,
      "maximum": 2900000000000
    },
    "objectOfStrings": {
      "type": "object",
      "unevaluatedProperties": false,
      "patternProperties": {
        "^[\\p{L}\\p{N}]+$": { "$ref": "#/$defs/string" }
      },
      "maxProperties": 256,
      "required": []
    },
    "string": {
      "type": "string",
      "pattern": "^[\\p{L}\\p{N}\\p{P} ]*$",
      "minLength": 0,
      "maxLength": 256
    },
    "stringBoolean": {
      "type": "string",
      "enum": ["true", "false"]
    },
    "stringInteger": {
      "type": "string",
      "pattern": "^-?[0-9]+$",
      "minLength": 1,
      "maxLength": 16
    },
    "stringUUID": {
      "type": "string",
      "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
      "minLength": 36,
      "maxLength": 36
    },
    "stringISOTimestamp": {
      "type": "string",
      "format": "date-time",
      "minLength": 24,
      "maxLength": 28
    },
    "stringAWSTimestamp": {
      "description": "09/Oct/2024:13:35:43 +0000",
      "type": "string",
      "pattern": "^[0-3][0-9]/[A-Z][a-z]{2}/2[01][2-9][0-9]:[0-2][0-9]:[0-5][0-9]:[0-9][0-9] [+-][0-9]{4}$",
      "minLength": 26,
      "maxLength": 26
    },
    "stringBase64": {
      "type": "string",
      "pattern": "^[0-9a-zA-Z+/]*=*$",
      "minLength": 1,
      "maxLength": 256
    },
    "stringAWSBase64": {
      "type": "string",
      "pattern": "^[0-9a-zA-Z_-]*=*$",
      "minLength": 1,
      "maxLength": 256
    },
    "stringSHA256": {
      "type": "string",
      "pattern": "^[0-9a-f]{64}$",
      "minLength": 64,
      "maxLength": 64
    }
  }
}
